import java.util.PriorityQueue;
import java.io.File;
import java.io.IOException;
import java.util.Scanner;
import java.util.Iterator;
import java.util.Collections;

/* Peter Dunbar
 * Takes values from a file and puts them into a single LL and does it by order
 * of the number of guests, it also puts all the values into a double LL. 
 * It will print single in order and print double backwards. IT will take some
 * constraints from the parrots file and will find them the AirBnbs they are
 * looking for. then finally it will remove both "Apartments" and "Condos"
 */

public class PeterDunbarAssignment9 {
	public static void main(String[] args) throws IOException{
		//Create the LinkedLists
		AirBnbLinkedList singleLinked = new AirBnbLinkedList();
		DoubleLinkedList doubleLinked = new DoubleLinkedList();
		
		//Fill both lists with AirBnbs
		File aFile1 = new File("Airbnbs.txt");
		Scanner inputFile1 = new Scanner(aFile1);
		while(inputFile1.hasNext()) {
			int rate = inputFile1.nextInt();
			int numGst = inputFile1.nextInt();
			int numBed = inputFile1.nextInt();
			String type = inputFile1.nextLine().trim();
			AirBnb airbnb = new AirBnb(rate, numGst, numBed, type);
			singleLinked.addByGuests(airbnb);
			doubleLinked.addToEnd(airbnb);
		}
		
		//Print both lists
		//single from start to end and double from end to start
		System.out.println("Airbnbs in Single Linked List - Ordered by Number of Guests");
		System.out.println("Airbnbs Type:  Nightly Rate:  Guests:  Bedrooms:\n");
		singleLinked.print();
		System.out.println("________________________________________________\n");
		System.out.println("\nAirbnbs in Doubly Linked List - Airbnbs Printed Backwards");
		System.out.println("Airbnbs Type:  Nightly Rate:  Guests:  Bedrooms:\n");
		doubleLinked.printBackwards();
		System.out.println("________________________________________________\n");
		
		//Get Parrots the AirBnbs they want and put into PQ
		File aFile2 = new File("AirbnbRequirements.txt");
		Scanner inputFile2 = new Scanner(aFile2);
		int rateReq = inputFile2.nextInt();
		int numGstReq = inputFile2.nextInt();
		String typeReq = inputFile2.nextLine().trim();
		PriorityQueue<AirBnb> parrotFits = singleLinked.findAirbnb(rateReq, numGstReq, typeReq);
		
		//Displays the AirBnbs that fit the Parrots ideals
		System.out.println("\nAirbnbs in Priority Queue Meeting Parrot Requirements: ");
		System.out.printf("%d a night or less, %d guests, and %s\n\n", rateReq, numGstReq, typeReq);
		System.out.println("Airbnbs Type:  Nightly Rate:  Guests:  Bedrooms:\n");
		while(!parrotFits.isEmpty()) {
			//System.out.println("I made it here");
			AirBnb temp = parrotFits.remove();
			String monkey = temp.toString();
			System.out.println(monkey);
		}
		System.out.println("________________________________________________\n");
		
		//remove all AirBnbs of “Apartment” and “Condo” 
		int numApartRemoved = 0;
		int numCondoRemoved = 0;
		numApartRemoved = singleLinked.removeSpecificType("Apartment");
		numCondoRemoved = singleLinked.removeSpecificType("Condo");
		
		//Display singleLinked list
		System.out.println("Airbnbs in Single Linked List – Apartments and Condos Removed\n");
		System.out.printf("Number of Apartments removed: %d\n", numApartRemoved);
		System.out.printf("Number of Condos removed: %d\n", numCondoRemoved);
		System.out.println("________________________________________________\n");
		System.out.println("Printing single");
		System.out.println("Airbnbs Type:  Nightly Rate:  Guests:  Bedrooms:\n");
		singleLinked.print();
	}
}

class AirBnb implements Comparable<AirBnb>{
	private int nightlyRate;
	private int numGuest;
	private int numBedroom;
	private String type;
	public AirBnb(int nightlyRate, int numGuest, int numBedroom, String type){
		this.nightlyRate = nightlyRate;
		this.numGuest = numGuest;
		this.numBedroom = numBedroom;
		this.type = type;
	}
	
	public int getNightlyRate() {
		return nightlyRate;
	}
	public int getNumGuest() {
		return numGuest;
	}
	public int getNumBedroom() {
		return numBedroom;
	}
	public String getType() {
		return type;
	}
	
	@Override
	public String toString() {
		String allValues = type + "  " + nightlyRate + "  " + numGuest + "  " + numBedroom;
		return allValues;
	}
	
	//the less guests you have to closer to the top it will go
	@Override
	public int compareTo(AirBnb other) {
		if(numGuest > other.getNumGuest()) {
			return 1;
		}
		else if(numGuest == other.getNumGuest()) {
			return 0;
		}
		else if(numGuest < other.getNumGuest()) {
			return - 1;
		}
		return 0;
	}
}

class AirBnbLinkedList{
	Node head;
	public AirBnbLinkedList() {
		head = null;
	}
	
	public void addByGuests (AirBnb airbnbToAdd) {
		Node newNode = new Node(airbnbToAdd);
		Node previous = null;
		Node current = head;
		
		boolean found = false;
		//Moves current to where it needs to be
		while(current != null && found == false) {
			if(current.element.compareTo(newNode.element) == 1) {
				found = true;
			}
			else {
				previous = current;
				current = current.next;
			}
		}
		//if no list yet make the head
		if(previous == null) {
			head = newNode;
			head.next = current;
		}
		//add to the middle
		else {
			newNode.next = current;
			previous.next = newNode;
		}			
	}
	
	public PriorityQueue<AirBnb> findAirbnb (int nightlyRate, int numGuests, String type){
		PriorityQueue<AirBnb> list = new PriorityQueue<>();
		
		Node current = head;
		while(current != null) {
			if(current.element.getNightlyRate() <= nightlyRate && current.element.getNumGuest() >= numGuests && current.element.getType().equals(type)){
				list.offer(current.element);
				current = current.next;
			}
			else {
				//System.out.println("I made it here");
				current = current.next;
			}
		}
		return list;
	}
	
	public int removeSpecificType(String typeToRemove) {
		//middle function is deleting values behind it
		Node current = head;
		Node previous = null;
		if(head == null) {
			return 0;
		}
		int count = 0;
		while(current != null) {
			if(typeToRemove.equals(current.element.getType())) {
				//remove head
				if(head == current) {
					head = head.next;
					current = current.next;
					count++;
				}
				//remove tail
				else if(current.next == null) {
					current = previous;
					current.next = null;
					count++;
				}
				//remove middle
				else {
					Node temp = current.next;
					previous.next = temp;
					previous = current;
					current = current.next;
					count++;
				}
			}
			//if not meeting the type
			else {
				previous = current;
				current = current.next;
			}
		}
		return count;
	}
	
	public void print() {
		Node current = head;
		while(current != null) {
			String monkey = current.element.toString();
			System.out.println(monkey);
			current = current.next;
		}
	}
	
	private static class Node{
		private AirBnb element;
		private Node next;
		public Node(AirBnb element) {
			this.element = element;
			next = null;
		}
	}
}

class DoubleLinkedList{
	private Node head;
	private Node tail;
	public DoubleLinkedList() {
		head = null;
		tail = null;
	}
	
	public void addToEnd (AirBnb airbnbToAdd) {
		Node newNode = new Node(airbnbToAdd);
		if(tail == null) {
			head = tail = newNode;
		}
		else {
			tail.next = newNode;
			tail = newNode;
		}
	}
	
	public void printBackwards() {
		Node current = head;
		Node temp = null;
		//while we haven't printed anything
		while(temp != head) {
			//while we are not at the end move forward
			while(current.next != temp) {
				current = current.next;
			}
			//print out data
			temp = current;
			String monkey = current.element.toString();
			System.out.println(monkey);
			//restart head
			current = head;
			
		}
		
	}
	
	private static class Node{
		private AirBnb element;
		private Node previous;
		private Node next;
		public Node(AirBnb element) {
			this.element = element;
			previous = null;
			next = null;
		}
	}
}

import java.util.LinkedList;
import java.io.File;
import java.io.IOException;
import java.util.Scanner;
import java.util.Queue;

/* Peter Dunbar
 * Takes parrots from a file and adds them into a binary tree. The birds 
 * will be placed respectively to their id #. Then The program will print
 * out the song parrot by parrot. Then we start from the left most leaf 
 * and go right while printing out the parrots names.
 */

public class PeterDunbarAssigment10 {
	public static void main(String[] args) throws IOException {
		BinaryTree parrotsTree = new BinaryTree();
		
		//adds parrots to the Binary Tree
		File aFile1 = new File("parrots.txt");
		Scanner inputFile1 = new Scanner(aFile1);
		while(inputFile1.hasNext()) {
			int id = inputFile1.nextInt();
			String name = inputFile1.next();
			String songWord = inputFile1.nextLine();
			Parrot parrotToAdd = new Parrot(id, name, songWord);
			parrotsTree.insert(parrotToAdd);
		}
		
		//prints out the song 
		System.out.println("Parrot's Song");
		System.out.println("_______________________");
		parrotsTree.LevelOrder();
		
		//visits each leaf and prints the bird on it
		System.out.println("\n\nParrot's Names");
		System.out.println("_______________________");
		parrotsTree.visitLeaves();
		
	}
}

class Parrot {
	private int id;
	private String name;
	private String songWord;
	public Parrot(int id, String name, String songWord) {
		this.id = id;
		this.name = name;
		this.songWord = songWord;
	}
	
	public String getName() {
		return name;
	}
	public String sing() {
		return songWord;
	}
	
	public int compareTo(Parrot otherParrot) {
		if(otherParrot.id > id) {
			return -1;
		}
		else if(otherParrot.id == id) {
			return 0;
		}
		else if(otherParrot.id < id) {
			return 1;
		}
		return 0;
	}
}

class BinaryTree{
	private TreeNode root;
	public BinaryTree() {
		root = null;
	}
	
	public boolean insert(Parrot parrotToAdd) {
		//if no list exists yet
		if(root == null) {
			root = new TreeNode(parrotToAdd);
			return true;
		}
		else {
			TreeNode parent = null;
			TreeNode current = root;
			
			//find where in the list it fits
			while (current != null) {
				if (parrotToAdd.compareTo(current.parrot) == -1) {
					parent = current;
					current = current.left;
				}
				else if (parrotToAdd.compareTo(current.parrot) == 1) {
					parent = current;
					current = current.right;
				}
				else {
					return false;
				}
			} 
			
			//adds parrot to where it belongs in the list
			if (parrotToAdd.compareTo(parent.parrot) == -1) {
				parent.left = new TreeNode(parrotToAdd);
				return true;
			}
			else {
				parent.right = new TreeNode(parrotToAdd);
				return true;
			}
		}
	}
		
	public void LevelOrder() {
		Queue<TreeNode> queue = new LinkedList<>();
		
		//prints out the parrots song
		if(root != null) {
			queue.add(root);
		}
		while(!queue.isEmpty()) {
            TreeNode tempNode = queue.poll();
            System.out.print(tempNode.parrot.sing() + " ");

            if (tempNode.left != null) {
                queue.add(tempNode.left);
            }
            if (tempNode.right != null) {
                queue.add(tempNode.right);
            }
		}
	}
	
	//allows main to call visitLeaves
	public void visitLeaves() {
		visitLeaves(root);
	}
	
	private void visitLeaves(TreeNode aNode) {
	    if (aNode == null) {
	        return;
	    }
	    //prints from left to right
	    else {
		    visitLeaves(aNode.left);
	    	
		    System.out.println(aNode.parrot.getName() + " ");

		    visitLeaves(aNode.right);
	    }
	}
		
	
	private class TreeNode{
		private Parrot parrot;
		private TreeNode left;
		private TreeNode right;
		public TreeNode(Parrot parrot) {
			this.parrot = parrot;
			left = null;
			right = null;
		}
	}
}
